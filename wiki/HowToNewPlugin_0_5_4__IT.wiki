L'obbiettivo di questo tutorial è quello di mostrare, in maniera pratica, come realizzare un nuovo plugin per VLCShares di tipo DataProvider. I plugin di questo tipo hanno come scopo principale quello di navigare all'interno di un sito web e estrappolarne i contenuti video o audio per renderli utilizzabili dai dispositivi supportati da VLCShares.

==Prefazione: note preliminari==

Nel tutorial utilizzerò queste convenzioni di base per questioni di comodità:
   * *APACHE_WWW*: indica la directory _DocumentRoot_ utilizzata da Apache. Per Ubuntu, corrisponde alla directory `/var/www/`, per Windows (utilizzando il pacchetto di installazione automatica di VLCShares) corrisponde a `C:\Program Files\VLCShares\www`.
   * *VLCSHARES_BASEDIR*: indica la directory principale di VLCShares (quella che contiene le cartelle `library`, `application`,...). Per Ubuntu corrisponde a `APACHE_WWW/vlc-shares/`, per Windows `APACHE_WWW\vlc-shares\`.
   * *VLCSHARESDEV_BASEDIR*: sarà la directory in cui andremo ad installare la versione di sviluppo di vlc-shares. Per Ubuntu corrisponde a `APACHE_WWW/vlc-shares-dev/`, per Windows `APACHE_WWW\vlc-shares-dev\`.

==Prefazione: prepariamo il NOSTRO ambiente di sviluppo==

In questa fase cercheremo di preparare una installazione di sviluppo di vlc-shares sulla quale poter sviluppare il nostro plugin in maniera diretta. In questo modo potremo lavorare senza dover necessariamente rimuovere e reinstallare ogni versione del plugin per poterne testare le modifiche.

Per poter completare con successo questo tutorial è necessario che siate forniti di qualche semplice strumento di base:
   * *una installazione funzionante di VLCShares.*
   * *un editor di testo o un IDE per php*. Potete usare quello che preferite. Vanno bene sia i semplici editor di testo con il riconoscimento della sinstassi php (ad esempio Notepad++ se siete su Windows o GEdit se siete su Linux), che IDE più avanzati che offrono ad esempio auto completamento del codice o altro (ad esempio Zend Studio, Eclipse PDT...)
   * *svn* (se siete su Windows, potete utilizzare TortoiseSVN)
   * *php-cli* (su ubuntu basta installare il pacchetto php5-cli, su Windows dovrebbe essere già compreso nella distribuzione EasyPHP)

Una volta che vi siete procurato il necessario, iniziamo scaricando la versione di sviluppo di vlc-shares.
Utilizzando svn (o TortoiseSVN) dovete eseguire un checkout di una versione di sviluppo all'interno della directory *VLCSHARESDEV_BASEDIR*. Dovete però decidere quale. Avete due scelte a disposizione:
   * potete utilizzare la versione instabile di sviluppo, nel qual caso l'indirizzo di cui effettuare il checkout è il seguente
{{{
http://vlc-shares.googlecode.com/svn/trunk/
}}}
   * oppure potete utilizzare una versione stabile a vostra scelta. Questa guida ha come obbiettivo lo sviluppo di plugin per la versione 0.5.4. Utilizzeremo quindi come indirizzo 
{{{
http://vlc-shares.googlecode.com/svn/tags/0.5.4/
}}} 
*ATTENZIONE:* attualmente la versione 0.5.4 non è stata ancora rilasciata, quindi per ora dovete usare la versione di sviluppo instabile. 

Una volta terminato lo scaricamento, aprile il file *VLCSHARESDEV_BASEDIR*`/public/.htaccess` e aggiungete come prima riga questo testo:

{{{
SetEnv APPLICATION_ENV development
}}}

Fatto questo, posizionate il browser all'indirizzo `http://localhost/vlc-shares-dev/public/` e procedete come in una normale installazione di vlc-shares. E' buona norma non installare alcun genere di plugin opzionale, a meno che non lo riteniate un requisito necessario per il vostro plugin.

Una volta completata l'installazione, aprite una console (per Windows XP: cliccate su Start->esegui e scrivete `cmd.exe`, per Windows Vista/7 cliccate su Start e scrivete direttamente `cmd.exe`).

Posizionatevi tramite la console nella directory *VLCSHARESDEV_BASEDIR*`\scripts\`.
Gli utenti Windows possono farlo scrivendo (chiaramente adattate il percorso in base al vostro caso)

{{{
cd C:\Program Files\VLCShares\www\vlc-shares-dev\scripts\
}}}

Gli utenti Ubuntu possono farlo scrivendo

{{{
cd /var/www/vlc-shares-dev/scripts/
}}}

A questo punto siamo pronti a cominciare.

==Fase 1: scegliamo il nostro obbiettivo==

Come già detto nelle premesse, il plugin che andremo a realizzare è di tipo DataProvider. Questo significa che abbiamo bisogno di un sito target nel quale il nostro plugin dovrà andare a cercare i video. Ho deciso, per questioni di semplicità di realizzazione, di utilizzare il sito `film-stream.tv` in questo esempio.

La struttura del sito è abbastanza semplice, questo schema dovrebbe chiarirla:

{{{
            HOME ---- Ultimi aggiornamenti
             |           |- serie
             |           |- film
             |           |- anime
             |
             |---- FILM ---- A ----- Titolo A1 ---- Megavideo
             |            |- B    |- Titolo A2   |- Megaupload
             |            |- ...  |- ...         |- ...
             |
             |---- ANIME ---- Titolo A1 ---- Puntata [1x01]
             |             |- Titolo A2   |- Puntata [1x02]
             |             |- Titolo B1   |- Puntata [2x01]
             |             |- ...         |- ...
             |
             |---- FILM (sub-ita) ---- Titolo A1 ---- Megavideo
             |                      |- Titolo B1   |- Megaupload
             |                      |- ...         |- ...
             |
             |---- SERIETV ---- Titolo A1 ---- Puntata [1x01]
                             |- Titolo A2   |- Puntata [1x02]
                             |- Titolo B1   |- Puntata [2x01]
                             |- ...         |- ...
    
}}}

==Fase 2: immaginiamo il nostro plugin==

Struttureremo il nostro plugin in modo che sia possibile raggiungere gli indici delle varie tipologie di filmati suddivisi per lettere e che sia anche possibile ottenere gli ultimi aggiornamenti per ogni categoria. Struttureremo i nostri contenuti in questo modo:

{{{

SELEZIONE TIPO -----> SELEZIONE GRUPPO ---> SEL. TITOLO --> SEL. VIDEO
 |- film               |- Ult. Aggior.       |- Tit. 1       |- Vid 1
 |- anime              |- A                  |- Tit. 2       |- Vid 2
 |- film subita        |- B                  |- ...          |- ...
 |- serie tv           |- ...


}}}


I plugin per VLCShares sono molto versatili e possono utilizzare molte componenti diverse: oltre al plugin in se è possibile che in ogni pacchetto di installazione contenga al suo interno molti altri componenti come controller, traduzioni, viste, helper, modelli, tabelle... (per una lista completa è bene dare uno sguardo [PluginsAPI#System_Architecture all'architettura di sistema]). In questo caso specifico il nostro plugin per funzionare ha bisogno soltanto della classe principale e dei file di traduzione. Ogni altro componente è superfluo. Aggiungeremo anche una immagine che rappresenterà il logo del plugin che verrà visualizzata nell'indice delle collezioni (vedremo dopo come).

==Fase 3: prepariamo la struttura del nostro plugin==

Se avete seguito la fase [HowToNewPlugin_0_5_4__IT#Prefazione:_prepariamo_il_NOSTRO_ambiente_di_sviluppo Prefazione: prepariamo il NOSTRO ambiente di sviluppo] dovreste avere una console aperta nella directory *VLCSHARESDEV_BASEDIR*`/scripts/`.

Utilizzando quella console eseguite il comando:

per WINDOWS
{{{
php.bat create-plugin.php -k filmstream -n FilmStream -e plugins,languages,images
}}}

per UBUNTU
{{{
php create-plugin.php -k filmstream -n FilmStream -e plugins,languages,images
}}}

L'esecuzione dello script dovrebbe visualizzare come risultato:
{{{
[EEE] Key already used
}}}

Non c'è niente di cui preoccuparsi: semplicemente vi viene notificato che un plugin che utilizza la stessa chiave è gia presente e che quindi non è possibile utilizzarla. Questo è abbastanza normale visto che il plugin di questo tutorial è incluso all'interno della versione di sviluppo di vlc-shares dalla versione 0.5.4 in poi. Per poter proseguire, dobbiamo quindi rinominare la cartella *VLCSHARESDEV_BASEDIR*`/extra/plugins/filmstream/` in *VLCSHARESDEV_BASEDIR*`/extra/plugins/filmstream-vanilla/`. In questo modo conserverete i file conclusivi che potrete usare come riferimento.

Eseguite nuovamente il comando indicato prima. Questa volta il risultato sarà:
{{{
All done. Bye
}}}

Lo script `create-plugin.php` si prenderà carico di creare la struttura delle directory e la lista dei file necessari per il corretto funzionamento del vostro plugin in base ai parametri che gli avrete indicato.
Lo script accetta questi parametri:

{{{
Usage: create-plugin.php [ options ]
  --key|-k [ <string> ]      Plugin key
  --name|-n [ <string> ]     Plugin name
  --all|-a                   Create all elements
  --ignorekey|-i             Ignore error if the key already exists
  --elements|-e [ <string> ] Create a list of elements (divided by comma). Supported: plugins, helpers, controllers, models, data, views, forms, layouts, languages, images, css, js
--help|-h                  Help -- usage message
}}}

Nel nostro caso specifico, abbiamo indicato allo script di creare la struttura e i file per un plugin che abbia key `filmstream`, nome `FilmStream`, specificando come elementi richiesti `plugins` (crea il file della classe principale del plugin), `languages` (crea i file delle traduzioni), `images` (crea la directory per l'immagine del logo).

Lo script creerà quanto richiesto all'interno della directory *VLCSHARESDEV_BASEDIR*`/extra/plugins/filestream/`.

Questo è quello che verrà creato:

{{{
 extra/plugins/filmstream/
   |-- dev_bootstrap.php
   |-- dev_cleanup.php
   |-- install.sql
   |-- uninstall.sql
   |-- README.txt
   |-- manifest.xml
   |-- languages/
   |     |- X_VlcShares_Plugins_FilmStream.en_GB.ini
   |     |- X_VlcShares_Plugins_FilmStream.it_IT.ini
   |
   |-- public/
   |     |- images/
   |          |- filmstream/
   |
   |-- library/
         |- X/
              |- VlcShares/
                   |- Plugins/
                        |- FilmStream.php
}}}

*ATTENZIONE*: se avete deciso di ignorare la fase di preparazione dell'ambiente di sviluppo è necessario che creiate manualmente questa struttura di file e directory per poter continuare a seguire il tutorial.

Alcuni degli elementi creati dovrebbero essere già noti, così come la struttura delle directory. Nel caso non lo fosse, mi rimando alla lettura della pagina [HowToNewPlugin#Version_0.5.1 sulla creazione dei plugin per la versione 0.5.1] in quanto ancora attuale.

Altri elementi sono stati introdotti dalla versione 0.5.3. I file `dev_bootstrap.php` e `dev_cleanup.php` sono due file utilizzati rispettivamente per l'inizializzazione e la pulizia delle risorse del plugin quando eseguito dall'interno della directory `extra/`.

Normalmente i plugin, per essere inizializzati, necessitano di essere elencati insieme ad alcuni metadati (come la versione e le path dei file), all'interno del database di vlc-shares. Inoltre è necessario che i file siano posizionati in determinati punti del sistema per poter essere utilizzati. Normalmente di questo si occupa il sistema durante l'installazione del plugin utilizzando le informazioni contenute nel file `manifest.xml`. Il problema di questo sistema è che risulta un po' scomodo lavorare sui file di un plugin e poi pacchettizzarlo se è necessario distribuire i file qui e li e dover rimuovere e reinstallare il plugin ogni volta che è necessario apportare delle modifiche e testarle.
Utilizzando il file `dev_bootstrap.php` (dopo averlo modificato a dovere), è possibile indicare al sistema tutte le informazioni necessarie per inizializzare correttamente il plugin.

Come prima fase quindi provvediamo a configurare correttamente il file `dev_bootstrap.php`

Nel nostro caso sarà necessario solo specificare pochi parametri. Modifichiamo l'elenco delle directory e file di cui creare i link 

{{{
/**
 * Insert the needed links
 * Those files or directory will be linked (in linux)
 * or copied (in windows) everytime the application will be executed
 * 
 * Use
 *  APPLICATION_PATH = /vlc-shares/application
 * or
 *  $basePath = the directory where this file is placed
 *  
 * as basepath
 * 
 * Entry format is:
 * 	Real entry path => linked/copied path
 * 
 * Usually language files or image/css/js folders must be setted here
 */
$neededLinks = array(
	//$basePath.'/public/images/myfolder/' => APPLICATION_PATH.'/../public/images/myfolder', // <--- THIS IS AN EXAMPLE FOR FOLDERS
	//$basePath.'/languages/myfile.txt' => APPLICATION_PATH.'/../languages/myfile.txt', // <--- THIS IS AN EXAMPLE FOR FILES
);
}}}

aggiungendo il percorso dei nostri file di lingua e la nostra directory del logo

{{{
$neededLinks = array(
	$basePath.'/public/images/filmstream/' => APPLICATION_PATH.'/../public/images/filmstream', // crea un link della cartella delle immagini
	$basePath.'/languages/X_VlcShares_Plugins_FilmStream.en_GB.ini' => APPLICATION_PATH.'/../languages/X_VlcShares_Plugins_FilmStream.en_GB.ini', // link al file di traduzione
	$basePath.'/languages/X_VlcShares_Plugins_FilmStream.it_IT.ini' => APPLICATION_PATH.'/../languages/X_VlcShares_Plugins_FilmStream.it_IT.ini', // link al file di traduzione
);
}}}

Aggiungiamo poi il percorso al file del plugin da includere all'interno dell'array dei file dei plugin da includere

{{{
/**
 * Plugin class file to include
 * Use
 *  $basePath = the directory where this file is placed
 * as basepath
 */
$pluginsIncludes = array(
	$basePath.'/library/X/VlcShares/Plugins/FileStream.php',
);
}}}

L'ultima modifica da apportare è quella relativa all'inserimento del nome della classe e della chiave del plugin:

{{{
/**
 * Insert here the pluginKey
 */
$pluginInstance_pluginKey = 'filmstream';

/**
 * Insert here the plugin class
 */
$pluginInstance_pluginClass = 'X_VlcShares_Plugins_FilmStream';
}}}