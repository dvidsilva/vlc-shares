#summary VLCShares plugins system information
#labels Phase-Implementation

= Introduction =

This document talks about the plugin system of VLCShares. This infos are aimed for developer.

= System Architecture =

VLCShares is built upon [http://framework.zend.com/ ZendFramework]. Understanding of the functioning of the framework is a recommended prerequisite to better understand how VLCShares works.

VLCShares follows the MVC Pattern and integrates an independent Plugins System. Main controllers follow the baselines of ZendFramework (so, they are placed inside _application/controllers/_ folder) and follow ZendFramework name rules.

Standard main controllers are:
  * *IndexController*: index controller. Redirect the application flow to Management interface or Browse interface and provides collections index page.
  * *ManageController*: management page controller. Dashboard and configs panels are provided by this controller. 
  * *BrowseController*: manage the browse/stream functionality. The main work of this plugin is to reassemble resource returned by plugins.
  * *ControlsController*: provides functionality for controls vlc's streams.
  * *TestController*: execute system test and provides results.
  * *ErrorController*: display error information
  * *ConfigController*: provide a way to manage lazy plugins configurations without the need of create a plugin management interface for each plugin.
  * *InstallerController*: execute initial configuration of VLCShares

The following scheme reproduce the transactions between controlles and pages while in browse and reproduction mode

|| http://vlc-shares.googlecode.com/svn/wiki/scheme-browse-reproduction.png ||

== Plugin systems ==

The core part of plugins system is the Plugin Broker ({{{X_VlcShares_Plugins_Broker}}} class) object. It acts as a container for plugin references and forwards trigger calls to each plugin that is registered for the trigger. This object is bootstrapped by another class ({{{X_VlcShares_Plugins}}}) that has the assignment of create plugin broker, register installed (and active) plugins into the broker, initialize plugins configs and initialize active plugin helpers.
The plugin broker also provides services for register/unregister new plugins on the fly or for plugin retrieval by id or class.
Usage example (can be executed anywhere inside the application):
{{{
$pluginBroker = X_VlcShares_Plugins::broker();
$myPlugin = new My_Plugin_That_Does_Lots_Stuff();

// register on the fly a new plugin
$pluginBroker->register('myPluginId', $myPlugin);

// check if plugin is registered
if ( $pluginBroker->isRegistered('myPluginId') ) {
   // ...and unregister it
   $pluginBroker->unregisterPluginId('myPluginId');
} else {
   // ...or unregister all plugin of class...
   $pluginBroker->unregisterPluginClass('My_Plugin_That_Does_Lots_Stuff');
}

// let's see what is registered now
var_dump($pluginBroker->getPlugins());

// i want a specific plugin by ID
try {
   $anotherPlugin = $pluginBroker->getPlugins('anotherPluginId');
   $anotherPlugin->specificFunctionCall();
} catch (Exception $e) {
   // there isn't the plugin
}

// let's call a trigger function:
// even if there is no gen_afterPluginsInitialized in the class
// the magic function __call trap the call and forward it
// to all plugin registered for that trigger
$pluginBroker->gen_afterPluginsInitialized();

// unregister all plugins
$pluginBroker->unregisterAll();

}}}

The controllers use the plugin broker to trigger functions of registered plugins.

A valid plugin for VLCShares 0.5 must extends the abstract class {{{X_VlcShares_Plugins_Abstract}}}. This abstract class provides basic services for configuration store and retrieval, plugins priorities and a list of implemented and neutral (no interaction or return values) valid trigger functions.
While creating a new plugin you must override one or more triggers and register the plugin for those triggers using the {{{setPriority}}} function.

=== Priority System ===
The priority system is used by the plugin broker to sort plugin calls. If a plugin want to register itself for a trigger, it must use the {{{setPriority}}} function:

{{{
/**
 * Set priority for the trigger 
 * (if priority for a trigger is not setted,
 * the trigger callback will be ignored)
 * @param string $triggerName
 * @param int $priority
 * @return X_VlcShares_Plugins_Abstract
 */
public function setPriority($triggerName, $priority = 50);
}}}

Valid values for {{{$priority}}} are positive integers. _0_ indicates top priority. If two or more plugins register their self for the same trigger with the same priority, they will be sorted by registration order.

=== Standard Interfaces ===

VLCShares provides some standard interface for plugins.
  * {{{X_VlcShares_Plugins_ResolverInterface}}}: data provider plugins should implement this interface for allow others plugin to resolve a decoded and absolute resource location.
  * {{{X_VlcShares_Plugins_ResolverDisplayableInterface}}}: this interface extends {{{X_VlcShares_Plugins_ResolverInterface}}} and ensures that the returned value of {{{resolveLocation}}} function can be displayed by the interface. This interface has been added in VLCShares 0.5.1

=== Inputs and Outputs ===

Input and Outputs of trigger functions are specified in the function comment. However, most of the trigger functions of level1 apis require arrays of page items as output.

Page items are associative arrays with some selected keys. Below there is a list of valid keys

|| *Key* || *Meaning* || *Value type* || *Required* || *Default* ||
|| label || The name of the page item || String || true || no-default ||
|| link || The URL address of the resource that you are describing || URL || true || no-default ||
|| type || The type of resource that you are linking || video | playlist | search || false || playlist ||
|| icon || An icon that will represent the item || String: a path of a file inside the /public/ dir || false || null, but some renderer could have a default ||
|| desc || A short description of the item || String || false || null ||
|| location || The plain location value of the item || String || false || null ||
|| thumb || The location of a thumbnail image || URL || false || null, but some renderer could have a default ||
|| highlight || If the renderer should highlight the item || Boolean || false || false ||

Label and Link keys are mandatory, the others are optional. Any other key type can be used to specified plugin-specific key. It's better if you prepend the plugin-specific keys with a %PLUGIN_CLASS%: namespace to avoid overriding.

This is a pratical example of how to specify a page items array. The item in the example is one of the items returned from the plugin FileSystem for the index/collections page:
{{{
return array(
		array(
			'label' => X_Env::_('p_filesystem_collectionindex'), 
			'link'	=> X_Env::completeUrl(
				$urlHelper->url(
					array(
						'controller' => 'browse',
						'action' => 'share',
						'p' => $this->getId(),
					), 'default', true
				)
			),
			'icon'	=> '/images/filesystem/logo.png',
			'desc'	=> X_Env::_('p_filesystem_collectionindex_desc')
		)
	);
}}}

=== Plugin Preferences ===

== Plugins Helpers ==

== How to create a new Plugin ==

= Generic triggers =

=== gen_afterPluginsInitialized ===

=== gen_beforePageBuild ===

=== gen_afterPageBuild ===

=== gen_beforeInit ===

=== gen_afterInit ===

=== gen_preProviderSelection ===

= Level 1 APIs =

== Page: Index/Collections ==

=== preGetCollectionsItems ===
=== getCollectionsItems ===
=== postGetCollectionsItems ===
=== filterCollectionsItems ===

== Page: Browse/Share ==

=== preGetShareItems ===
=== getShareItems ===
=== postGetShareItems ===
=== filterShareItems ===
=== orderShareItems ===

== Page: Browse/Mode ==

=== preGetModeItems ===
=== getModeItems ===
=== postGetModeItems ===
=== filterModeItems ===
=== orderModeItems ===

== Page: Browse/Selection ==

=== preGetSelectionItems ===
=== getSelectionItems ===
=== postGetSelectionItems ===
=== filterSelectionItems ===
=== orderSelectionItems ===

== Page: Browse/Stream ==

=== preGetStreamItems ===
=== getStreamItems ===
=== postGetStreamItems ===
=== preRegisterVlcArgs ===
=== registerVlcArgs ===
=== postRegisterVlcArgs ===
=== preSpawnVlc ===
=== postSpawnVlc ===

== Page: Controls/Control ==

=== preGetControlItems ===
=== getControlItems ===
=== postGetControlItems ===

== Page: Controls/Execute ==

=== preGetExecuteItems === 
=== getExecuteItems ===
=== postGetExecuteItems ===
=== preExecute ===
=== execute ===
=== postExecute ===

= Level 2 APIs =

=== getIndexActionLinks ===
=== getIndexManageLinks ===
=== getIndexStatistics ===
=== getIndexMessages ===
=== getIndexNews ===
=== preGetTestItems ===
=== getTestItems ===
=== postGetTestItems ===
=== prepareConfigElement ===